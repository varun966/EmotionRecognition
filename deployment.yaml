apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-app
  labels:
    app: flask-app
spec:
  replicas: 1                       # single small node -> 1 replica
  progressDeadlineSeconds: 1800     # allow long model warm-up
  strategy:
    type: Recreate                  # avoid surge on t3.small
  selector:
    matchLabels:
      app: flask-app
  template:
    metadata:
      labels:
        app: flask-app
    spec:
      containers:
      - name: flask-app
        image: REPLACED_BY_CI:latest        # CI sets the real image/tag right after apply
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5000
        resources:
          requests:
            memory: "512Mi"
            cpu: "300m"
          limits:
            memory: "1200Mi"
            cpu: "1"
        startupProbe:                       # give the app time to load TF models
          httpGet: { path: "/", port: 5000 }
          periodSeconds: 10
          failureThreshold: 90              # ~15 minutes
        readinessProbe:
          httpGet: { path: "/", port: 5000 }
          initialDelaySeconds: 25
          periodSeconds: 10
        livenessProbe:
          httpGet: { path: "/", port: 5000 }
          initialDelaySeconds: 40
          periodSeconds: 20
        env:
        - name: DAGSHUB_TOKEN
          valueFrom:
            secretKeyRef:
              name: dagshub-secret          # <-- using dagshub-secret
              key: DAGSHUB_TOKEN
        - name: FLASK_ENV
          value: "production"
---
apiVersion: v1
kind: Service
metadata:
  name: flask-app-service
spec:
  type: LoadBalancer
  selector:
    app: flask-app
  ports:
    - name: http
      protocol: TCP
      port: 5000
      targetPort: 5000
