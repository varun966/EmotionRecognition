name: CI Pipeline

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
      - '**/README*'
  workflow_dispatch:

jobs:
  ci-tests:
    name: Test, Build, and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run model unit tests
        env:
          DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
        run: python -m unittest tests/test_model.py

      - name: Run Flask app tests
        env:
          DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
        run: python -m unittest tests/test_flask_app.py

      - name: Promote model to production
        env:
          DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
        run: python scripts/promote_model.py

      # --- AWS creds for ECR + EKS ---
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      # --- Ensure ECR repo exists (region-aware) ---
      - name: Ensure ECR repository
        run: |
          aws ecr describe-repositories --region "${{ secrets.AWS_REGION }}" --repository-names "${{ secrets.ECR_REPOSITORY }}" \
          || aws ecr create-repository --region "${{ secrets.AWS_REGION }}" --repository-name "${{ secrets.ECR_REPOSITORY }}"

      # --- Login to ECR ---
      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      # --- Build & push image (tag with SHA and latest) ---
      - name: Build & push Docker image
        env:
          IMAGE_URI: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}
        run: |
          docker build -t "$IMAGE_URI:latest" -t "$IMAGE_URI:${{ github.sha }}" .
          docker push "$IMAGE_URI:${{ github.sha }}"
          docker push "$IMAGE_URI:latest"

      # --- kubectl setup and kubeconfig ---
      - name: Set Up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.31.0'   # matches your EKS 1.31 control plane

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name flask-app-cluster

      # --- Create/Update Secret expected by deployment.yaml (dagshub-secret) ---
      - name: Create/Update Kubernetes Secret
        run: |
          kubectl create secret generic dagshub-secret \
            --from-literal=DAGSHUB_TOKEN='${{ secrets.DAGSHUB_TOKEN }}' \
            --dry-run=client -o yaml | kubectl apply -f -

      # --- Apply manifests, set image to this commit, wait for rollout ---
      - name: Deploy to EKS
        env:
          IMAGE_URI: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}
        run: |
          kubectl apply -f deployment.yaml
          kubectl set image deployment/flask-app flask-app="$IMAGE_URI:${{ github.sha }}"
          kubectl rollout status deployment/flask-app --timeout=20m

  training-pipeline:
    if: github.event_name == 'workflow_dispatch'
    name: Run DVC Training Pipeline
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Setup DVC
        run: |
          sudo apt-get update
          sudo apt-get install -y dvc

      - name: Run DVC pipeline (training)
        env:
          DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
          KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
          KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}
        run: |
          dvc pull
          dvc repro

      - name: Promote model to production
        env:
          DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
        run: python scripts/promote_model.py
